%div.well
  %a.btn.btn-xs.btn-default{:href => to('/predict'), :style=>"margin-bottom:1em;"}
    %span.glyphicon.glyphicon-chevron-left
    New Prediction

  %h3.help-block
    Similar particles
  %hr  
  :javascript 
    $(document).ready(function(){
      $("table#neighbors").tablesorter({
        debug: false,
        theme: "bootstrap",
        headerTemplate: '{content} {icon}',
        widgets: ['uitheme', 'stickyHeaders', 'staticRow'],
        widgetOptions: {
          stickyHeaders : '',
          stickyHeaders_offset : 0,
          stickyHeaders_cloneId : '-sticky',
          stickyHeaders_addResizeEvent : true,
          stickyHeaders_includeCaption : true,
          stickyHeaders_zIndex : 2,
          stickyHeaders_attachTo : null,
          stickyHeaders_xScroll : null,
          stickyHeaders_yScroll : null,
          stickyHeaders_filteredToTop: true
        },
        sortList: [[1,1]],
        widthFixed: false
      });
      $("table#physchem").tablesorter({
        debug: false,
        theme: "bootstrap",
      });
    });

  %div.table-responsive
    %table.tablesorter{:id=>"neighbors"}
      %thead
        %tr
          %th
            ID  
          %th
            Similarity
          %th
            Composition  
          %th
            Tox
          %th
            Physchem
      %tbody
        / query
        %tr.static
          / id
          %td
            %h5 Query
          / similarity
          %td
            x
          / composition
          %td
            x
          / tox
          %td
            - if @prediction[:prediction]
              - @prediction[:prediction].each do |k,v|
                %h5 Prediction
                %p= k
                - if v == nil
                  %p 0
                - else
                  %p= v.round(5)
            - else
              x
          / physchem
          %td
            - @input.each do |v|
              %div{:style=>"display:inline-block;padding-right:20px;"}
                %h5= v[0].gsub(/\sMean/, '')
                %p= v[1].round(3)
        / match
        - if @prediction[:match]
          %tr.static
            / id
            %td
              %h5= @prediction[:match].keys[0]
            / similarity
            %td
              %h5 match
            / composition
            %td
              - @prediction[:match].values[0]["composition"].each do |k,v|
                %h5= k
                %p= v
            / tox
            %td
              - @prediction[:match].values[0]["tox"].each do |k,v|
                %h5 Measurement prediction
                %p= k
                %p= v.round(3)
                - if @prediction[:prediction]
                  - @prediction[:prediction].each do |k,v|
                    %h5 Prediction
                    %p= k
                    - if v == nil
                      %p 0
                    - else
                      %p= v.round(5)
            / physchem
            %td
              - @prediction[:match].values[0]["physchem"].each do |k,v|
                %div{:style=>"display:inline-block;padding-right:20px;"}
                  %h5= k.gsub(/\sMean/, '')
                  %p= v.round(3)
        / neighbors
        - if @prediction[:neighbors]
          - @prediction[:neighbors].each_with_index do |neighbor,idx|
            %tr
              / ID
              %td
                %h5= neighbor["id"]
              / Similarity
              %td
                %h5= neighbor["similarity"].round(3)
              / Composition
              %td
                - neighbor["composition"].each do |k,v|
                  %h5= k
                  %p= v
              / Tox
              %td
                - neighbor["tox"].each do |k,v|
                  %h5 Measurement prediction
                  %p= k
                  %p= v.round(3)
              / Physchem
              %td
                - neighbor["physchem"].each do |k,v|
                  %div{:style=>"display:inline-block;padding-right:20px;"}
                    %h5= k.gsub(/\sMean/, '')
                    %p= v.round(3)

